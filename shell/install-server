#!/usr/bin/env node

/**
 * Install Express Server dependencies to Reagent
 */

// need to be at top level...
if (process.cwd().indexOf('shell') >= 0) {
  process.chdir('..');
}

/* global test, cp, exec */
require('shelljs/global');
const chalk = require('chalk');
const format = require('util').format;
const path = require('path');
const serverDepends = require('../package.json').serverDependencies

// remove path to node, and script name
const args = process.argv.slice(2);

/**
 * Backup Server app's package.json file to this name.
 */
ServerPackageBackupFile = 'package.orig.json';

// colorize output...
const chalkError = chalk.bold.red;
const chalkStatus = chalk.green;
const chalkWarn = chalk.yellow;

const ERRORS = {
  ERR_MISSING_REAGENT_PAGKAGE : 'Reagent package.json not found at "%s"',
  ERR_MISSING_EXPRESS_PAGKAGE : 'Server App package.json not found at "%s"',
  ERR_BACKUP_FILE_EXISTS      : `Backup file "${ServerPackageBackupFile}" `
                                + 'already exists. Merge has apparently already been run. '
                                + 'Please restore original package.json and try again.',
  BACKUP_FAIL                 : 'Failed to backup original App server package.json. exiting.'
};



main(args);
process.exit(0);
/* - fin - */


/**
 * main
 */
function main(args) {

  // will exit on error
  backupPackageFile('./package.json', ServerPackageBackupFile);

  const depends = collectDepends(serverDepends, 'dependencies');
  const devDepends = collectDepends(serverDepends, 'devDependencies');

  if (depends) {
    npmInstall(depends, '--save');
  }

  if (devDepends) {
    npmInstall(devDepends, '--save-dev');
  }
}

/**
 * run npm install
 * flags = `--save` | `--save-dev`
 */
function npmInstall(module_array, flags) {
  const modules = module_array.join(' ');
  const cmd = `npm install ${flags} ${modules}`;
  console.log(chalk.yellow.dim(`~> Installing modules for ${flags}: ${modules}`));
  rc = exec(cmd);
  status(rc);
}


/**
 * Return array of module names for key (devDependencies | dependencies)
 * FALSE returned if package data does not contain `key`
 */
function collectDepends(json, key) {
  // console.log(json, key);
  if (json[key]) {
    return Object.keys(json[key]);
  } else {
    return false;
  }
}

/**
 * cp App server's package.json to a backup file in prep
 * for merging Reagent's depends into original package.json.
 */
function backupPackageFile(package_file, backup_name) {
  const loc = path.parse(package_file);
  const newLoc = path.join(loc.dir, backup_name);

  if (fileExists(newLoc)) {
    msgAndDie(ERRORS.ERR_BACKUP_FILE_EXISTS);
  }

  status(`Backing up ${package_file} to ${backup_name}`);
  const rc = cp('-n', package_file, newLoc); // cp but do not overwrite (-n)
  if (rc.code === 0) {
    status(`\tSuccess! ${newLoc}`);
  } else {
    warn(rc.stderr);
    msgAndDie(ERRORS.BACKUP_FAIL);
  }
}

/**
 * print progress messages
 */
function status(msg) {
  console.log( chalkStatus(`~> ${msg}`) );
}

/**
 * log message in threatening colors
 */
function warn(msg) {
  console.log( chalkWarn(msg) );
}

/**
 * returns true if `file` path exists and is a file.
 */
function fileExists(file) {
  return test('-f', file);
}

function msgAndDie() {
  console.log( chalkError(format.apply(null, Array.prototype.slice.call(arguments))) );
  process.exit(2);
}

function usageThenDie() {
  const l = console.log;
  const scriptName = process.argv[1];
  l('Usage:')
  l(`${path.basename(scriptName)} <path-to-reagent-package.json> <path-to-ExpressJS-package.json>`);
  process.exit(1);
}

